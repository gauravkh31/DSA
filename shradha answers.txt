1. 
public Pair<Integer, Integer> getMinMax(int[] arr) {
        // Code Here
        
        int minimum = arr[0];
        int maximum = arr[0];
        
        for(int i : arr){
            if(i>maximum){
                maximum = i;
            }
            if(i<minimum){
                minimum = i;
            }
        }
        
        
        
        
        
        
     return new Pair(minimum, maximum);   
    }















2. 
public void reverseArray(int arr[]) {
        // code here
        int i =0; 
        int j = arr.length-1;
        while(i<j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }








3. 
public int maxSubArray(int[] nums) {
        int maxSum =nums[0]; 
        int sum = nums[0];

        for(int i =1; i < nums.length; i++){
            sum = Math.max(nums[i], sum + nums[i]);
            maxSum = Math.max(sum,maxSum);
        }


       return maxSum; 
    }












4. 

 public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for(int n : nums){
            if(set.contains(n)){
                return true;
            }else{
                set.add(n);
            }
        }
        return false;
    }






    5. 
    important-
    Arraylist ko collection ke sort method se sort kr skte hai.
    isme constant sliding window use hua hai
    

     public int findMinDiff(ArrayList<Integer> arr, int m) {
        // your code here
        Collections.sort(arr);
        int i =0; 
        int j = m-1;
        int min = arr.get(j)-arr.get(i);
        while(j<arr.size()){
            if((arr.get(j)-arr.get(i))<min){
                min=arr.get(j)-arr.get(i);
            }
            i++;
            j++;
        }
        return min;
    }

















    7. 
    class Solution {
    public static void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }

    public static void reverse(int[] a, int i, int j) {
        while (i < j) {
            swap(a, i, j);
            i++;
            j--;
        }
    }

    void nextPermutation(int[] arr) {
        int n = arr.length;
        int p = -1;

        // Step 1: Find the first decreasing element from the right
        for (int i = n - 1; i > 0; i--) {
            if (arr[i - 1] < arr[i]) {
                p = i - 1;
                break;
            }
        }

        // Step 2: If no such element exists, reverse the array (last permutation -> first permutation)
        if (p == -1) {
            reverse(arr, 0, n - 1);
            return;
        }

        // Step 3: Find the smallest element on the right of 'p' that is larger than arr[p]
        for (int i = n - 1; i > p; i--) {
            if (arr[i] > arr[p]) {
                swap(arr, p, i);
                break;
            }
        }

        // Step 4: Reverse the elements to the right of 'p' to get the next permutation
        reverse(arr, p + 1, n - 1);
    }
}











8.


    public ArrayList<Integer> repeatedNumber(final List<Integer> nums) {
          int n = nums.size();
    
    long sumExpected = (long) n * (n + 1) / 2;
    long sumSquaresExpected = (long) n * (n + 1) * (2 * n + 1) / 6;
    
    long sumActual = 0, sumSquaresActual = 0;
    
    for (int num : nums) {
        sumActual += num;
        sumSquaresActual += (long) num * num;
    }
    
    long sumDiff = sumActual - sumExpected; // A - B
    long sumSquaresDiff = sumSquaresActual - sumSquaresExpected; // A^2 - B^2
    
    long sumAB = sumSquaresDiff / sumDiff; // (A + B) = (A^2 - B^2) / (A - B)
    
    int A = (int) ((sumDiff + sumAB) / 2);
    int B = (int) (sumAB - A);
    
    ArrayList<Integer> ans = new ArrayList<>();
    ans.add(A);
    ans.add(B);
    return ans;
  
        
    }











8.
public int maxProfit(int[] prices) {
        int currMin = prices[0];
        int maxProfit = 0;

        for(int i = 0;i < prices.length; i++){
            maxProfit = Math.max(maxProfit, prices[i] - currMin);

            currMin = Math.min(currMin, prices[i]);
        }
        return maxProfit;
    }